"-------------------------------------------------------------------------------
" プラグインごとの設定
"-------------------------------------------------------------------------------

"------------------------------------
" CamelCaseMotion
"------------------------------------
"前方・後方移動をキャメルケース単位にする
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

"テキストオブジェクトに対応させる
omap <silent> iw <Plug>CamelCaseMotion_iw
vmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
vmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
vmap <silent> ie <Plug>CamelCaseMotion_ie


"------------------------------------
" ctrlp.vim
"------------------------------------
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(git|hg|svn))$'
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/](node_modules|target|dist)|(\.(git|hg|svn))$',
"  \ 'file': '\v\.(swp|tox|ico)$',
"  \ 'link': 'some_bad_symbolic_links',
"  \ }

if executable('ag')
  let g:ctrlp_user_command = "ag %s -l | grep -Ev '"+ g:ctrlp_custom_ignore +"'"
else
  let g:ctrlp_user_command = "find %s -type f | grep -Ev '"+ g:ctrlp_custom_ignore +"'"
endif
let g:ctrlp_use_caching = 0
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
noremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_map = '<leader>e'
let g:ctrlp_open_new_file = 'r'


"------------------------------------
" lightline.vim
"------------------------------------
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste' ],
      \     ['fugitive', 'filename'],
      \     ['ctrlpmark']
      \   ],
      \   'right': [
      \     ['syntastic', 'lineinfo'],
      \     ['percent'],
      \     ['fileformat', 'fileencoding', 'filetype']
      \   ]
      \ },
      \ 'component_function': {
      \   'modified': 'LightLineModified',
      \   'readonly': 'LightLineReadonly',
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '⮀', 'right': '⮂' },
      \ 'subseparator': {'left': '⮁', 'right': '⮃'}
      \ }
"      \ 'separator': { 'left': '▶', 'right': '◀' },
"      \ 'subseparator': { 'left': '»', 'right': '«' }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  "return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⊘ ' : ''
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤ ' : ''
endfunction

function! LightLineFilename()
"  let fname = expand('%:t')
  let fname = expand('%')
"  return fname == 'ControlP' ? g:lightline.ctrlp_item :
"        \ fname == '__Tagbar__' ? g:lightline.fname :
"        \ fname =~ '__Gundo\|NERD_tree' ? '' :
"        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
"        \ &ft == 'unite' ? unite#get_status_string() :
"        \ &ft == 'vimshell' ? vimshell#get_status_string() :
"        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
"        \ ('' != fname ? fname : '[No Name]') .
"        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  return fname
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = '⭠ '  " edit here for cool mark
"      let mark = '⎇ '  " edit here for cool mark
"      let mark = '⤴ '  " edit here for cool mark
"      let mark = '➔ '  " edit here for cool mark
"      let mark = '➥ '  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ &ft == 'unite' ? 'Unite' :
        \ &ft == 'vimfiler' ? 'VimFiler' :
        \ &ft == 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
  let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0


"------------------------------------
" vim-easy-align
"------------------------------------
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)


"------------------------------------
" tagbar
"------------------------------------
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

let g:tagbar_type_go = {
  \   'ctagstype': 'go',
  \   'kinds': ['p:package', 'i:imports:1', 'c:constants', 'v:variables',
  \     't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
  \     'r:constructor', 'f:functions'
  \   ],
  \   'sro': '.',
  \   'kind2scope': {'t': 'ctype', 'n': 'ntype'},
  \   'scope2kind': {'ctype': 't', 'ntype': 'n'},
  \   'ctagsbin': 'gotags',
  \   'ctagsargs': '-sort -silent'
  \ }


"------------------------------------
" vim-indent-guides
"------------------------------------
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_space_guide = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'vimfiler', 'quickfix', 'unite']
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
if 'dark' == &background
  hi IndentGuidesOdd  ctermbg=black
  hi IndentGuidesEven ctermbg=darkgrey
else
  hi IndentGuidesOdd  ctermbg=white
  hi IndentGuidesEven ctermbg=lightgrey
endif


"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]

nnoremap [unite]u  :<C-u>Unite -no-split -no-resize -start-insert<Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -no-resize -start-insert -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -no-resize -start-insert -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split -no-resize -start-insert buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split -no-resize -start-insert buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split -no-resize -start-insert file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split -no-resize -start-insert file<CR>
" snippet一覧
nnoremap <silent> [unite]s  :<C-u>Unite snippet<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

let g:yankring_zap_keys = ""
" from basyura/unite-rails
nnoremap <silent> [unite]rm  :<C-u>Unite -no-split -no-resize -start-insert rails/model<CR>
nnoremap <silent> [unite]rc  :<C-u>Unite -no-split -no-resize -start-insert rails/controller<CR>
nnoremap <silent> [unite]rv  :<C-u>Unite -no-split -no-resize -start-insert rails/view<CR>
nnoremap <silent> [unite]rl  :<C-u>Unite -no-split -no-resize -start-insert rails/lib<CR>
nnoremap <silent> [unite]rj  :<C-u>Unite -no-split -no-resize -start-insert rails/javascript<CR>
nnoremap <silent> [unite]rs  :<C-u>Unite -no-split -no-resize -start-insert rails/spec<CR>


autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif


"------------------------------------
" unite-help
"------------------------------------
cnoremap UH Unite help<Enter>


"------------------------------------
" unite-outline
"------------------------------------
cnoremap UO Unite outline<Enter>


"------------------------------------
" vimfiler
"------------------------------------
command! VimFilerTree call VimFilerTree(<f-args>)
function VimFilerTree(...)
  let l:h = expand(a:0 > 0 ? a:1 : '%:p:h')
  let l:path = isdirectory(l:h) ? l:h : ''
  exec ':VimFiler -buffer-name=explorer -split -simple -winwidth=45 -toggle -no-quit ' . l:path
  wincmd t
  setl winfixwidth
endfunction
autocmd! FileType vimfiler call my_vimfiler_settings()
function! s:my_vimfiler_settings()
  nmap     <buffer><expr><CR> vimfiler#smart_cursor_map("\<Plug>(vimfiler_expand_tree)", "\<Plug>(vimfiler_edit_file)")
  nnoremap <buffer>s          :call vimfiler#mappings#do_action('my_split')<CR>
  nnoremap <buffer>v          :call vimfiler#mappings#do_action('my_vsplit')<CR>
endfunction

let my_action = {'is_selectable' : 1}
function! my_action.func(candidates)
  wincmd p
  exec 'split '. a:candidates[0].action__path
endfunction
call unite#custom_action('file', 'my_split', my_action)

let my_action = {'is_selectable' : 1}
function! my_action.func(candidates)
  wincmd p
  exec 'vsplit '. a:candidates[0].action__path
endfunction
call unite#custom_action('file', 'my_vsplit', my_action)


"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '$ '


"------------------------------------
" nerdtree
"------------------------------------
let g:NERDChristmasTree = 1
"let g:NERDTreeChDirMode=2
let g:NERDTreeHighlightCursorline = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
"let NERDTreeIgnore=['\.git',  '\.svn',  '\.log',  '\.ignore',  '\.cvs',  '\.swp']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
"let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F6> :NERDTreeFind<CR>
"noremap <F7> :NERDTreeToggle<CR>
nnoremap <silent> <C-e> :NERDTreeToggle<CR>


"------------------------------------
" nerdcommenter
"------------------------------------
" コメントの間にスペースを空ける
let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
map <Leader>x, c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
let NERDShutUp=1

let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction


"------------------------------------
" syntastic
" ref. https://github.com/scrooloose/syntastic#settings
"------------------------------------
" エラー行に sign を表示
let g:syntastic_enable_signs = 1
" location list を常に更新
let g:syntastic_always_populate_loc_list = 1
" location list を常に表示
let g:syntastic_auto_loc_list = 1
" ファイルを開いた時にチェックを実行する
let g:syntastic_check_on_open = 1
" :wq で終了する時もチェックする
let g:syntastic_check_on_wq = 0

" for Coffeescript
let g:syntastic_coffee_checkers = ['coffeelint']
" for CSS
let g:syntastic_css_checkers = ['stylelint']
" for Go
let g:syntastic_go_checkers = ['go', 'golint', 'govet']
" for JavaScript
let g:syntastic_javascript_checkers = ['eslint']
" for TypeScript
let g:syntastic_typescript_checkers = ['tslint']
" for Haml
let g:syntastic_haml_checkers = ['haml']
" for HTML
let g:syntastic_html_checkers = ['tidy']
" for Pug
let g:syntastic_pug_checkers = ['pug_lint']
" for Markdown
let g:syntastic_markdown_checkers = ['mdl']
" for Perl
let g:syntastic_perl_checkers = ['perl']
" for PHP
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
" for Phthon
let g:syntastic_python_checkers = ['python', 'pylint']
" for Ruby
let g:syntastic_ruby_checkers = ['rubocop']
" for Sass
let g:syntastic_sass_checkers = ['sass']
" for Scala
let g:syntastic_scala_checkers = ['scalastyle']
" for Scss
let g:syntastic_scss_checkers = ['scss_lint', 'stylelint']

let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_warning_symbol = '⚠'


"------------------------------------
" vim-quickrun
"------------------------------------
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \   'runner': 'vimproc',
  \   'runner/vimproc/updatetime': 60,
  \   'outputter': 'error',
  \   'outputter/error/success': 'buffer',
  \   'outputter/error/error': 'quickfix',
  \   'outputter/buffer/split': ':rightbelow 8sp',
  \   'outputter/buffer/close_on_empty': 1,
  \ }

" q でquickfixを閉じれるようにする。
au FileType qf nnoremap <silent><buffer>q :quit<CR>
" \r で保存してからquickrunを実行する。
let g:quickrun_no_default_key_mappings = 1
nnoremap \r :write<CR>:QuickRun -mode n<CR>
xnoremap \r :<C-U>write<CR>gv:QuickRun -mode v<CR>
" \r でquickfixを閉じて、保存してからquickrunを実行する。
let g:quickrun_no_default_key_mappings = 1
nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
" <C-c> でquickrunを停止する。
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"


"------------------------------------
" vim-ref
"------------------------------------


"------------------------------------
" vim-fugitive
"------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>


"------------------------------------
" vim-surround
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"


"------------------------------------
" grep.vim
"------------------------------------
nnoremap <silent> <leader>f :Rgrep<CR>
let Grep_Default_Options = '-IR'
let Grep_Skip_Files = '*.log *.db'
let Grep_Skip_Dirs = '.git node_modules'


"------------------------------------
" vim-session
"------------------------------------
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vim終了時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
  " 5分間に1回自動保存
  let g:session_autosave_periodic = 5
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory


" vim:fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2:
